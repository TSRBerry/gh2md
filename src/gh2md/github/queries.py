from gql.dsl import DSLSchema, dsl_gql, DSLQuery, DSLVariableDefinitions
from graphql import DocumentNode

from gh2md.github.fragments import Fragments


class Queries:
    def __init__(self, ds: DSLSchema):
        self._ds = ds
        self.var = DSLVariableDefinitions()
        self._fragments = Fragments(ds, self.var)

    def repository(self) -> DocumentNode:
        query = DSLQuery(
            self._ds.Query.rateLimit.select(self._fragments.rate_limit),
            self._ds.Query.repository(
                name=self.var.repo,
                owner=self.var.owner,
            ).select(
                self._ds.Repository.archivedAt,
                self._ds.Repository.createdAt,
                self._ds.Repository.issues(
                    after=self.var.issueNextPageCursor,
                    first=self.var.issuePerPage,
                    orderBy={
                        "direction": "DESC",
                        "field": "CREATED_AT",
                    },
                    states=self.var.issueStates,
                ).select(
                    self._ds.IssueConnection.nodes.select(self._fragments.issue),
                    self._ds.IssueConnection.pageInfo.select(self._fragments.page_info),
                    self._ds.IssueConnection.totalCount,
                ),
                self._ds.Repository.nameWithOwner,
                self._ds.Repository.pullRequests(
                    after=self.var.pullRequestNextPageCursor,
                    first=self.var.pullRequestPerPage,
                    orderBy={
                        "direction": "DESC",
                        "field": "CREATED_AT",
                    },
                    states=self.var.pullRequestStates,
                ).select(
                    self._ds.PullRequestConnection.nodes.select(self._fragments.pull_request),
                    self._ds.PullRequestConnection.pageInfo.select(self._fragments.page_info),
                    self._ds.PullRequestConnection.totalCount,
                ),
                self._ds.Repository.url,
            ),
        )
        query.variable_definitions = self.var

        return dsl_gql(
            self._fragments.rate_limit,
            self._fragments.page_info,
            self._fragments.actor,
            self._fragments.team,
            self._fragments.node,
            self._fragments.deployment,
            self._fragments.label,
            self._fragments.referenced_issue,
            self._fragments.referenced_pull_request,
            self._fragments.git_actor,
            self._fragments.commit,
            self._fragments.reaction_group,
            self._fragments.comment,
            self._fragments.pull_request_comment_connection,
            self._fragments.added_to_merge_queue_event,
            self._fragments.added_to_project_event,
            self._fragments.assigned_event,
            self._fragments.auto_merge_disabled_event,
            self._fragments.auto_merge_enabled_event,
            self._fragments.auto_rebase_enabled_event,
            self._fragments.auto_squash_enabled_event,
            self._fragments.automatic_base_change_failed_event,
            self._fragments.automatic_base_change_succeeded_event,
            self._fragments.base_ref_changed_event,
            self._fragments.base_ref_deleted_event,
            self._fragments.base_ref_force_pushed_event,
            self._fragments.closed_event,
            self._fragments.comment_deleted_event,
            self._fragments.connected_event,
            self._fragments.convert_to_draft_event,
            self._fragments.converted_note_to_issue_event,
            self._fragments.converted_to_discussion_event,
            self._fragments.cross_referenced_event,
            self._fragments.demilestoned_event,
            self._fragments.deployed_event,
            self._fragments.deployment_environment_changed_event,
            self._fragments.disconnected_event,
            self._fragments.head_ref_deleted_event,
            self._fragments.head_ref_force_pushed_event,
            self._fragments.head_ref_restored_event,
            self._fragments.issue_comment,
            self._fragments.labeled_event,
            self._fragments.locked_event,
            self._fragments.marked_as_duplicate_event,
            self._fragments.mentioned_event,
            self._fragments.merged_event,
            self._fragments.milestoned_event,
            self._fragments.moved_columns_in_project_event,
            self._fragments.pinned_event,
            self._fragments.pull_request_commit,
            self._fragments.pull_request_commit_comment_thread,
            self._fragments.pull_request_review,
            self._fragments.pull_request_review_thread,
            self._fragments.ready_for_review_event,
            self._fragments.referenced_event,
            self._fragments.removed_from_merge_queue_event,
            self._fragments.removed_from_project_event,
            self._fragments.renamed_title_event,
            self._fragments.reopened_event,
            self._fragments.review_dismissed_event,
            self._fragments.review_request_removed_event,
            self._fragments.review_requested_event,
            self._fragments.transferred_event,
            self._fragments.unassigned_event,
            self._fragments.unlabeled_event,
            self._fragments.unlocked_event,
            self._fragments.unmarked_as_duplicate_event,
            self._fragments.unpinned_event,
            self._fragments.issue_timeline_items_connection,
            self._fragments.issue,
            self._fragments.pull_request_timeline_items_connection,
            self._fragments.pull_request,
            query
        )

    def node(self) -> DocumentNode:
        query = DSLQuery(
            self._ds.Query.rateLimit.select(self._fragments.rate_limit),
            self._ds.Query.node(
                id=self.var.id,
            ).select(
                self._fragments.issue_timeline_items,
                self._fragments.pull_request_timeline_items,
            ),
        )
        query.variable_definitions = self.var

        return dsl_gql(
            self._fragments.rate_limit,
            self._fragments.page_info,
            self._fragments.actor,
            self._fragments.team,
            self._fragments.node,
            self._fragments.deployment,
            self._fragments.label,
            self._fragments.referenced_issue,
            self._fragments.referenced_pull_request,
            self._fragments.git_actor,
            self._fragments.commit,
            self._fragments.reaction_group,
            self._fragments.comment,
            self._fragments.pull_request_comment_connection,
            self._fragments.added_to_merge_queue_event,
            self._fragments.added_to_project_event,
            self._fragments.assigned_event,
            self._fragments.auto_merge_disabled_event,
            self._fragments.auto_merge_enabled_event,
            self._fragments.auto_rebase_enabled_event,
            self._fragments.auto_squash_enabled_event,
            self._fragments.automatic_base_change_failed_event,
            self._fragments.automatic_base_change_succeeded_event,
            self._fragments.base_ref_changed_event,
            self._fragments.base_ref_deleted_event,
            self._fragments.base_ref_force_pushed_event,
            self._fragments.closed_event,
            self._fragments.comment_deleted_event,
            self._fragments.connected_event,
            self._fragments.convert_to_draft_event,
            self._fragments.converted_note_to_issue_event,
            self._fragments.converted_to_discussion_event,
            self._fragments.cross_referenced_event,
            self._fragments.demilestoned_event,
            self._fragments.deployed_event,
            self._fragments.deployment_environment_changed_event,
            self._fragments.disconnected_event,
            self._fragments.head_ref_deleted_event,
            self._fragments.head_ref_force_pushed_event,
            self._fragments.head_ref_restored_event,
            self._fragments.issue_comment,
            self._fragments.labeled_event,
            self._fragments.locked_event,
            self._fragments.marked_as_duplicate_event,
            self._fragments.mentioned_event,
            self._fragments.merged_event,
            self._fragments.milestoned_event,
            self._fragments.moved_columns_in_project_event,
            self._fragments.pinned_event,
            self._fragments.pull_request_commit,
            self._fragments.pull_request_commit_comment_thread,
            self._fragments.pull_request_review,
            self._fragments.pull_request_review_thread,
            self._fragments.ready_for_review_event,
            self._fragments.referenced_event,
            self._fragments.removed_from_merge_queue_event,
            self._fragments.removed_from_project_event,
            self._fragments.renamed_title_event,
            self._fragments.reopened_event,
            self._fragments.review_dismissed_event,
            self._fragments.review_request_removed_event,
            self._fragments.review_requested_event,
            self._fragments.transferred_event,
            self._fragments.unassigned_event,
            self._fragments.unlabeled_event,
            self._fragments.unlocked_event,
            self._fragments.unmarked_as_duplicate_event,
            self._fragments.unpinned_event,
            self._fragments.issue_timeline_items_connection,
            self._fragments.issue_timeline_items,
            self._fragments.pull_request_timeline_items_connection,
            self._fragments.pull_request_timeline_items,
            query
        )
